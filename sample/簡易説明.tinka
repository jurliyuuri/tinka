-- コメントは現段階では行コメントのみ
-- 関数のインポート方法は2003lkと同様
xok jyvied

-- 実行はfasal関数から行う．
-- C言語と違い使用する関数の定義はどこでもよい．(マルチパスのため)
-- 関数の定義は"cersva [関数名] ( [引数] ) rinyv [処理内容] situv"となる．
-- インデントはスペースで2つ分か4つ分がよく使用される．
cersva fasal ()
rinyv
    -- 変数の宣言は"anax [変数名]"となる．
    -- 宣言時に初期化する場合には"anax [変数名] el [値]"となる．
    anax p
    anax F el 10
    -- 配列は"anax [変数名]:[個数]"となる．
    -- [個数]は定数である必要があり，初期化は不可．
    -- ポインタと配列の区別はない．
    anax f:10

    -- 変数への代入は"[値] eska [変数名]"となる．
    -- 変数を呼び出す際は"#p"のように変数名の最初に#を付加して使用する．
    1 eska #f:0
    -- 四則演算は記号で行う予定だが加算と減算以外は決まっていないのでそのまま
    #p + #F | 3 eska #p

    -- 関数呼び出しは"[関数名] ( [値] )"となる．
    -- 返り値がある場合には"eska [変数名]"を後ろに記述する．
    jyvied (10, 12) eska #p

    -- if文にあたる条件文は"fi [条件] rinyv [処理内容] situv"となる．
    -- centなどにあるolは現在のところない．
    fi #p xtlo 5
    rinyv
        #p + 5 eksa #p
    situv

    -- while文にあたり繰り返し文は"fal [条件] rinyv [処理内容] situv"となる．
    -- 現在のところcontinueやbreakにあたるものはない．
    fal #p xtlo 10
    rinyv
        #p + #F eksa #p
        1 + #p eksa #p
    situv

    dosnud 0
situv

